/*
 * generated by Xtext
 */
grammar gamma;

// Rule Package
rulePackage:
	'package'
	RULE_ID
	(
		'import'
		RULE_STRING
	)*
	(
		ruleConstantDeclaration
		    |
		ruleFunctionDeclaration
		    |
		ruleTypeDeclaration
		    |
		ruleComponent
		    |
		ruleInterface
	)*
;

// Rule TimeoutDeclaration
ruleTimeoutDeclaration:
	'timeout'
	RULE_ID
;

// Rule Trigger
ruleTrigger:
	(
		ruleOnCycleTrigger
		    |
		ruleAnyTrigger
		    |
		ruleComplexTrigger
	)
;

// Rule SimpleTrigger
ruleSimpleTrigger:
	(
		ruleOnCycleTrigger
		    |
		ruleAnyTrigger
		    |
		ruleOpaqueTrigger
		    |
		ruleEventTrigger
	)
;

// Rule ComplexTrigger
ruleComplexTrigger:
	ruleBinaryTrigger
;

// Rule BinaryTrigger
ruleBinaryTrigger:
	ruleEqualTrigger
;

// Rule EqualTrigger
ruleEqualTrigger:
	ruleImplyTrigger
	(
		ruleEqual
		ruleEqualTrigger
	)?
;

// Rule ImplyTrigger
ruleImplyTrigger:
	ruleOrTrigger
	(
		ruleImply
		ruleImplyTrigger
	)?
;

// Rule OrTrigger
ruleOrTrigger:
	ruleXorTrigger
	(
		ruleOr
		ruleOrTrigger
	)?
;

// Rule XorTrigger
ruleXorTrigger:
	ruleAndTrigger
	(
		ruleXor
		ruleXorTrigger
	)?
;

// Rule AndTrigger
ruleAndTrigger:
	ruleBinaryOperand
	(
		ruleAnd
		ruleAndTrigger
	)?
;

// Rule BinaryOperand
ruleBinaryOperand:
	(
		ruleUnaryTrigger
		    |
		ruleParenthesesTrigger
	)
;

// Rule UnaryTrigger
ruleUnaryTrigger:
	(
		ruleNotTrigger
		    |
		ruleEventTrigger
		    |
		ruleOpaqueTrigger
	)
;

// Rule NotTrigger
ruleNotTrigger:
	ruleNot
	ruleParenthesesTrigger
;

// Rule ParenthesesTrigger
ruleParenthesesTrigger:
	'('
	ruleEqualTrigger
	')'
;

// Rule OnCycleTrigger
ruleOnCycleTrigger:
	'cycle'
;

// Rule AnyTrigger
ruleAnyTrigger:
	'any'
;

// Rule OpaqueTrigger
ruleOpaqueTrigger:
	RULE_STRING
;

// Rule EventTrigger
ruleEventTrigger:
	ruleEventReference
;

// Rule EventReference
ruleEventReference:
	(
		ruleClockTickReference
		    |
		ruleTimeoutEventReference
		    |
		ruleAnyPortEventReference
		    |
		rulePortEventReference
	)
;

// Rule ClockTickReference
ruleClockTickReference:
	RULE_ID
;

// Rule TimeoutEventReference
ruleTimeoutEventReference:
	'timeout'
	RULE_ID
;

// Rule AnyPortEventReference
ruleAnyPortEventReference:
	RULE_ID
	'.'
	'any'
;

// Rule PortEventReference
rulePortEventReference:
	RULE_ID
	'.'
	RULE_ID
;

// Rule Port
rulePort:
	'port'
	RULE_ID
	':'
	ruleInterfaceRealization
;

// Rule InterfaceRealization
ruleInterfaceRealization:
	ruleRealizationMode
	RULE_ID
;

// Rule SynchronousStatechartDefinition
ruleSynchronousStatechartDefinition:
	((
		'@RegionSchedule'
		'='
		ruleSchedulingOrder
	)
	    |
	(
		'@OrthogonalRegionSchedule'
		'='
		ruleOrthogonalRegionSchedulingOrder
	)
	    |
	(
		'@TransitionPriority'
		'='
		ruleTransitionPriority
	)
	    |
	(
		'@GuardEvaluation'
		'='
		ruleGuardEvaluation
	)
	    |
	(
		ruleComponentAnnotation
		    |
		ruleStatechartContractAnnotation
	)+
	)*
	'statechart'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleVariableDeclaration
		    |
		ruleTimeoutDeclaration
	)*
	(
		ruleRegion
		    |
		ruleTransition
	)*
	ruleFunctionDeclaration
	*
	'}'
;

// Rule AsynchronousStatechartDefinition
ruleAsynchronousStatechartDefinition:
	'@Asynchronous'
	((
		'@RegionSchedule'
		'='
		ruleSchedulingOrder
	)
	    |
	(
		'@OrthogonalRegionSchedule'
		'='
		ruleOrthogonalRegionSchedulingOrder
	)
	    |
	(
		'@TransitionPriority'
		'='
		ruleTransitionPriority
	)
	    |
	(
		'@GuardEvaluation'
		'='
		ruleGuardEvaluation
	)
	    |
	(
		ruleComponentAnnotation
		    |
		ruleStatechartContractAnnotation
	)+
	)*
	'statechart'
	RULE_ID
	(
		'capacity'
		'('
		ruleExpression
		')'
	)?
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleVariableDeclaration
		    |
		ruleTimeoutDeclaration
	)*
	(
		ruleRegion
		    |
		ruleTransition
	)*
	ruleFunctionDeclaration
	*
	'}'
;

// Rule ComponentAnnotation
ruleComponentAnnotation:
	ruleWrapperComponentAnnotation
;

// Rule StatechartContractAnnotation
ruleStatechartContractAnnotation:
	(
		ruleScenarioAllowedWaitingAnnotation
		    |
		ruleScenarioContractAnnotation
		    |
		ruleAdaptiveContractAnnotation
		    |
		ruleMissionPhaseAnnotation
		    |
		ruleHasInitialoutputsBlockAnnotation
		    |
		ruleNegativeContractStatechartAnnotation
	)
;

// Rule NegativeContractStatechartAnnotation
ruleNegativeContractStatechartAnnotation:
	'@NegativeContractStatechart'
;

// Rule HasInitialoutputsBlockAnnotation
ruleHasInitialoutputsBlockAnnotation:
	'@HasInitialOutputsBlock'
;

// Rule ScenarioAllowedWaitingAnnotation
ruleScenarioAllowedWaitingAnnotation:
	'@ScenarioAllowedWaitAnnotation'
	'='
	ruleExpression
	'..'
	ruleExpression
;

// Rule ScenarioContractAnnotation
ruleScenarioContractAnnotation:
	'@ScenarioContractStatechart'
	'='
	RULE_ID
	'('
	ruleNotDefinedEventMode
	')'
;

// Rule AdaptiveContractAnnotation
ruleAdaptiveContractAnnotation:
	'@AdaptiveContractStatechart'
	'='
	RULE_ID
;

// Rule MissionPhaseAnnotation
ruleMissionPhaseAnnotation:
	'@PhaseStatechart'
;

// Rule WrapperComponentAnnotation
ruleWrapperComponentAnnotation:
	'@WrapperComponent'
;

// Rule Region
ruleRegion:
	'region'
	RULE_ID
	'{'
	ruleStateNode
	*
	'}'
;

// Rule Transition
ruleTransition:
	ruleTransitionAnnotation
	*
	'transition'
	(
		'('
		RULE_INTEGER
		')'
	)?
	'from'
	RULE_ID
	'to'
	RULE_ID
	(
		'when'
		ruleTrigger
	)?
	(
		'['
		ruleExpression
		']'
	)?
	(
		'/'
		(
			(ruleAction)
		)*
	)?
;

// Rule TransitionAnnotation
ruleTransitionAnnotation:
	ruleTransitionIdAnnotation
;

// Rule TransitionIdAnnotation
ruleTransitionIdAnnotation:
	'@'
	'('
	RULE_ID
	')'
;

// Rule StateNode
ruleStateNode:
	(
		rulePseudoState
		    |
		ruleState
	)
;

// Rule State
ruleState:
	ruleStateAnnotation
	*
	'state'
	RULE_ID
	(
		'{'
		(
			'invariant'
			ruleExpression
		)*
		(
			'entry'
			'/'
			(
				(ruleAction)
			)*
		)?
		(
			'exit'
			'/'
			(
				(ruleAction)
			)*
		)?
		ruleRegion
		*
		'}'
	)?
;

// Rule StateAnnotation
ruleStateAnnotation:
	(
		ruleStateContractAnnotation
		    |
		ruleMissionPhaseStateAnnotation
		    |
		ruleSpecialStateAnnotation
	)
;

// Rule SpecialStateAnnotation
ruleSpecialStateAnnotation:
	'@SpecialStateAnnotation'
	ruleSpecialStateKind
;

// Rule StateContractAnnotation
ruleStateContractAnnotation:
	'@StatechartContract'
	ruleLinkType
	?
	'history'
	?
	'='
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
		)*
		')'
	)?
;

// Rule MissionPhaseStateAnnotation
ruleMissionPhaseStateAnnotation:
	'@Phase'
	'='
	'['
	ruleHistory
	ruleComponentInstance
	'{'
	rulePortBinding
	*
	ruleVariableBinding
	*
	'}'
	']'
;

// Rule VariableBinding
ruleVariableBinding:
	'tie'
	RULE_ID
	'->'
	ruleInstanceVariableReference
;

// Rule InstanceVariableReference
ruleInstanceVariableReference:
	RULE_ID
	'.'
	RULE_ID
;

// Rule PseudoState
rulePseudoState:
	(
		ruleEntryState
		    |
		ruleForkState
		    |
		ruleJoinState
		    |
		ruleChoiceState
		    |
		ruleMergeState
	)
;

// Rule MergeState
ruleMergeState:
	'merge'
	RULE_ID
;

// Rule ChoiceState
ruleChoiceState:
	'choice'
	RULE_ID
;

// Rule JoinState
ruleJoinState:
	'join'
	RULE_ID
;

// Rule ForkState
ruleForkState:
	'fork'
	RULE_ID
;

// Rule EntryState
ruleEntryState:
	(
		ruleInitialState
		    |
		ruleShallowHistoryState
		    |
		ruleDeepHistoryState
	)
;

// Rule InitialState
ruleInitialState:
	'initial'
	RULE_ID
;

// Rule ShallowHistoryState
ruleShallowHistoryState:
	'shallow'
	'history'
	RULE_ID
;

// Rule DeepHistoryState
ruleDeepHistoryState:
	'deep'
	'history'
	RULE_ID
;

// Rule Component
ruleComponent:
	(
		ruleSynchronousComponent
		    |
		ruleAsynchronousComponent
	)
;

// Rule SynchronousComponent
ruleSynchronousComponent:
	(
		ruleSynchronousStatechartDefinition
		    |
		ruleAbstractSynchronousComponent
	)
;

// Rule AbstractSynchronousComponent
ruleAbstractSynchronousComponent:
	(
		ruleCascadeCompositeComponent
		    |
		ruleSynchronousCompositeComponent
	)
;

// Rule CascadeCompositeComponent
ruleCascadeCompositeComponent:
	ruleComponentAnnotation
	*
	'cascade'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleSynchronousComponentInstance
		    |
		rulePortBinding
		    |
		ruleChannel
	)*
	(
		'initial'
		'execute'
		ruleAtomicComponentInstanceReferenceExpression
		(
			','
			ruleAtomicComponentInstanceReferenceExpression
		)*
	)?
	(
		'execute'
		ruleAtomicComponentInstanceReferenceExpression
		(
			','
			ruleAtomicComponentInstanceReferenceExpression
		)*
	)?
	'}'
;

// Rule SynchronousCompositeComponent
ruleSynchronousCompositeComponent:
	ruleComponentAnnotation
	*
	'sync'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleSynchronousComponentInstance
		    |
		rulePortBinding
		    |
		ruleChannel
	)*
	'}'
;

// Rule AsynchronousComponent
ruleAsynchronousComponent:
	(
		ruleAbstractAsynchronousCompositeComponent
		    |
		ruleAsynchronousAdapter
		    |
		ruleAsynchronousStatechartDefinition
	)
;

// Rule AbstractAsynchronousCompositeComponent
ruleAbstractAsynchronousCompositeComponent:
	(
		ruleAsynchronousCompositeComponent
		    |
		ruleScheduledAsynchronousCompositeComponent
	)
;

// Rule AsynchronousCompositeComponent
ruleAsynchronousCompositeComponent:
	ruleComponentAnnotation
	*
	'async'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleAsynchronousComponentInstance
		    |
		rulePortBinding
		    |
		ruleChannel
	)*
	'}'
;

// Rule ScheduledAsynchronousCompositeComponent
ruleScheduledAsynchronousCompositeComponent:
	ruleComponentAnnotation
	*
	'scheduled-async'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleAsynchronousComponentInstance
		    |
		rulePortBinding
		    |
		ruleChannel
	)*
	(
		'initial'
		'execute'
		ruleAtomicComponentInstanceReferenceExpression
		(
			','
			ruleAtomicComponentInstanceReferenceExpression
		)*
	)?
	(
		'execute'
		ruleAtomicComponentInstanceReferenceExpression
		(
			','
			ruleAtomicComponentInstanceReferenceExpression
		)*
	)?
	'}'
;

// Rule AsynchronousAdapter
ruleAsynchronousAdapter:
	ruleComponentAnnotation
	*
	'adapter'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	'of'
	ruleSynchronousComponentInstance
	(
		'['
		(
			rulePort
			(
				','?
				rulePort
			)*
		)?
		']'
	)?
	'{'
	(
		ruleClockDeclaration
		    |
		ruleControlSpecificaiton
		    |
		ruleMessageQueue
	)*
	'}'
;

// Rule ClockDeclaration
ruleClockDeclaration:
	'clock'
	RULE_ID
	'('
	'rate'
	'='
	ruleTimeSpecification
	')'
;

// Rule TimeSpecification
ruleTimeSpecification:
	ruleAdditiveExpression
	ruleTimeUnit
;

// Rule ControlSpecificaiton
ruleControlSpecificaiton:
	'when'
	ruleSimpleTrigger
	'/'
	ruleControlFunction
;

// Rule MessageQueue
ruleMessageQueue:
	'queue'
	RULE_ID
	'('
	'priority'
	'='
	RULE_INTEGER
	','
	'capacity'
	'='
	ruleExpression
	(
		','
		'discard'
		'='
		ruleDiscardStrategy
	)?
	')'
	'{'
	ruleEventReference
	(
		','
		ruleEventReference
	)*
	'}'
;

// Rule PortBinding
rulePortBinding:
	'bind'
	RULE_ID
	'->'
	ruleInstancePortReference
;

// Rule InstancePortReference
ruleInstancePortReference:
	RULE_ID
	'.'
	RULE_ID
;

// Rule ComponentInstance
ruleComponentInstance:
	(
		ruleSynchronousComponentInstance
		    |
		'async'
		ruleAsynchronousComponentInstance
	)
;

// Rule AtomicComponentInstanceReferenceExpression
ruleAtomicComponentInstanceReferenceExpression:
	RULE_ID
;

// Rule ComponentInstanceReferenceExpression
ruleComponentInstanceReferenceExpression:
	RULE_ID
	(
		'->'
		ruleComponentInstanceReferenceExpression
	)?
;

// Rule SynchronousComponentInstance
ruleSynchronousComponentInstance:
	'component'
	RULE_ID
	':'
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
		)*
		')'
	)?
;

// Rule AsynchronousComponentInstance
ruleAsynchronousComponentInstance:
	'component'
	RULE_ID
	':'
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
		)*
		')'
	)?
;

// Rule Channel
ruleChannel:
	(
		ruleSimpleChannel
		    |
		ruleBroadcastChannel
	)
;

// Rule SimpleChannel
ruleSimpleChannel:
	'channel'
	'['
	ruleInstancePortReference
	']'
	'-o)-'
	'['
	ruleInstancePortReference
	']'
;

// Rule BroadcastChannel
ruleBroadcastChannel:
	'channel'
	'['
	ruleInstancePortReference
	']'
	'-o)-'
	'['
	ruleInstancePortReference
	(
		','
		ruleInstancePortReference
	)+
	']'
;

// Rule Interface
ruleInterface:
	'interface'
	RULE_ID
	(
		'extends'
		RULE_ID
		(
			','
			RULE_ID
		)*
	)?
	'{'
	ruleEventDeclaration
	*
	'}'
;

// Rule EventDeclaration
ruleEventDeclaration:
	ruleEventDirection
	ruleEvent
;

// Rule Event
ruleEvent:
	rulePersistency
	?
	'event'
	RULE_ID
	(
		'('
		ruleParameterDeclaration
		(
			','
			ruleParameterDeclaration
		)*
		')'
	)?
	(
		'priority'
		'='
		RULE_INTEGER
	)?
;

// Rule PrimaryExpression
rulePrimaryExpression:
	(
		superPrimaryExpression
		    |
		ruleEventParameterReferenceExpression
		    |
		ruleStateReferenceExpression
	)
;

// Rule StateReferenceExpression
ruleStateReferenceExpression:
	'in-state'
	'('
	RULE_ID
	'.'
	RULE_ID
	')'
;

// Rule EventParameterReferenceExpression
ruleEventParameterReferenceExpression:
	RULE_ID
	'.'
	RULE_ID
	'::'
	RULE_ID
;

// Rule InlineStatement
ruleInlineStatement:
	(
		superInlineStatement
		    |
		(
			ruleRaiseEventAction
			    |
			ruleSetTimeoutAction
		)
		';'
	)
;

// Rule RaiseEventAction
ruleRaiseEventAction:
	'raise'
	RULE_ID
	'.'
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
		)*
		')'
	)?
;

// Rule SetTimeoutAction
ruleSetTimeoutAction:
	'set'
	RULE_ID
	':='
	ruleTimeSpecification
;

// Rule ComponentInstanceStateReferenceExpression
ruleComponentInstanceStateReferenceExpression:
	'state'
	ruleComponentInstanceReferenceExpression
	'.'
	RULE_ID
	'.'
	RULE_ID
;

// Rule ComponentInstanceVariableReferenceExpression
ruleComponentInstanceVariableReferenceExpression:
	'variable'
	ruleComponentInstanceReferenceExpression
	'.'
	RULE_ID
;

// Rule ComponentInstanceEventReferenceExpression
ruleComponentInstanceEventReferenceExpression:
	'event'
	ruleComponentInstanceReferenceExpression
	'.'
	RULE_ID
	'.'
	RULE_ID
;

// Rule ComponentInstanceEventParameterReferenceExpression
ruleComponentInstanceEventParameterReferenceExpression:
	'parameter'
	ruleComponentInstanceReferenceExpression
	'.'
	RULE_ID
	'.'
	RULE_ID
	'::'
	RULE_ID
;

// Rule Action
ruleAction:
	(
		ruleBlock
		    |
		ruleStatement
	)
;

// Rule FunctionDeclaration
ruleFunctionDeclaration:
	(
		ruleLambdaDeclaration
		    |
		ruleProcedureDeclaration
	)
;

// Rule ProcedureDeclaration
ruleProcedureDeclaration:
	'procedure'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	':'
	ruleType
	ruleBlock
;

// Rule Block
ruleBlock:
	'{'
	ruleAction
	*
	'}'
;

// Rule Statement
ruleStatement:
	(
		ruleInlineStatement
		    |
		ruleMultilineStatement
	)
;

// Rule InlineStatement
superInlineStatement:
	(
		ruleVariableDeclarationStatement
		    |
		ruleConstantDeclarationStatement
		    |
		ruleReturnStatement
		    |
		ruleBreakStatement
		    |
		(
			(ruleAssignmentStatement)
		)
		    |
		ruleAssertionStatement
		    |
		ruleExpressionStatement
		    |
		ruleEmptyStatement
	)
	';'
;

// Rule MultilineStatement
ruleMultilineStatement:
	(
		ruleIfStatement
		    |
		ruleSwitchStatement
		    |
		ruleForStatement
		    |
		ruleChoiceStatement
	)
;

// Rule VariableDeclarationStatement
ruleVariableDeclarationStatement:
	ruleVariableDeclaration
;

// Rule ConstantDeclarationStatement
ruleConstantDeclarationStatement:
	ruleConstantDeclaration
;

// Rule ExpressionStatement
ruleExpressionStatement:
	ruleExpression
;

// Rule EmptyStatement
ruleEmptyStatement:
	'no'
	'operation'
;

// Rule IfBranch
ruleIfBranch:
	'('
	ruleExpression
	')'
	ruleAction
;

// Rule ElseBranch
ruleElseBranch:
	ruleElseExpression
	ruleAction
;

// Rule SwitchBranch
ruleSwitchBranch:
	ruleExpression
	':'
	ruleAction
;

// Rule DefaultBranch
ruleDefaultBranch:
	ruleDefaultExpression
	':'
	ruleAction
;

// Rule ChoiceBranch
ruleChoiceBranch:
	'['
	ruleExpression
	']'
	ruleAction
;

// Rule DefaultExpression
ruleDefaultExpression:
	'default'
;

// Rule IfStatement
ruleIfStatement:
	'if'
	ruleIfBranch
	(
		(
			('elseif')
		)
		ruleIfBranch
	)*
	(
		(ruleElseBranch)
	)?
;

// Rule SwitchStatement
ruleSwitchStatement:
	'switch'
	'('
	ruleExpression
	')'
	'{'
	'case'
	ruleSwitchBranch
	(
		'case'
		ruleSwitchBranch
	)*
	ruleDefaultBranch
	?
	'}'
;

// Rule ForStatement
ruleForStatement:
	'for'
	'('
	ruleParameterDeclaration
	'in'
	ruleExpression
	')'
	(
		(ruleAction)
	)
;

// Rule ReturnStatement
ruleReturnStatement:
	'return'
	ruleExpression
	?
;

// Rule BreakStatement
ruleBreakStatement:
	'break'
;

// Rule ChoiceStatement
ruleChoiceStatement:
	'choice'
	'{'
	'branch'
	ruleChoiceBranch
	(
		'branch'
		ruleChoiceBranch
	)*
	'}'
;

// Rule AssignmentStatement
ruleAssignmentStatement:
	ruleAssignableAccessExpression
	':='
	ruleExpression
;

// Rule AssertionStatement
ruleAssertionStatement:
	'assert'
	'('
	ruleExpression
	')'
;

// Rule AssignableAccessExpression
ruleAssignableAccessExpression:
	ruleAssignablePrimaryExpression
	(
		'['
		ruleExpression
		']'
		    |
		'.'
		ruleFieldReferenceExpression
	)*
;

// Rule AssignablePrimaryExpression
ruleAssignablePrimaryExpression:
	(
		ruleAssignableDirectReferenceExpression
		    |
		'('
		ruleAssignableAccessExpression
		')'
	)
;

// Rule AssignableDirectReferenceExpression
ruleAssignableDirectReferenceExpression:
	RULE_ID
;

// Rule ParameterDeclaration
ruleParameterDeclaration:
	RULE_ID
	':'
	ruleType
;

// Rule FieldDeclaration
ruleFieldDeclaration:
	RULE_ID
	':'
	ruleType
;

// Rule ConstantDeclaration
ruleConstantDeclaration:
	'const'
	RULE_ID
	':'
	ruleType
	(
		':='
		ruleExpression
	)?
;

// Rule VariableDeclaration
ruleVariableDeclaration:
	'var'
	RULE_ID
	':'
	ruleType
	(
		':='
		ruleExpression
	)?
;

// Rule LambdaDeclaration
ruleLambdaDeclaration:
	'lambda'
	RULE_ID
	(
		'('
		(
			ruleParameterDeclaration
			(
				','
				ruleParameterDeclaration
			)*
		)?
		')'
	)?
	':'
	ruleType
	(
		':='
		ruleExpression
	)?
;

// Rule Type
ruleType:
	(
		ruleTypeReference
		    |
		ruleTypeDefinition
	)
;

// Rule TypeDeclaration
ruleTypeDeclaration:
	'type'
	RULE_ID
	':'
	ruleType
;

// Rule TypeReference
ruleTypeReference:
	RULE_ID
;

// Rule TypeDefinition
ruleTypeDefinition:
	(
		ruleVoidTypeDefinition
		    |
		ruleIntegerTypeDefinition
		    |
		ruleBooleanTypeDefinition
		    |
		ruleDecimalTypeDefinition
		    |
		ruleRationalTypeDefinition
		    |
		ruleArrayTypeDefinition
		    |
		ruleIntegerRangeTypeDefinition
		    |
		ruleEnumerationTypeDefinition
		    |
		ruleRecordTypeDefinition
		    |
		ruleSubrangeTypeDefinition
		    |
		ruleFunctionTypeDefinition
	)
;

// Rule VoidTypeDefinition
ruleVoidTypeDefinition:
	'void'
;

// Rule IntegerTypeDefinition
ruleIntegerTypeDefinition:
	'integer'
;

// Rule BooleanTypeDefinition
ruleBooleanTypeDefinition:
	'boolean'
;

// Rule DecimalTypeDefinition
ruleDecimalTypeDefinition:
	'decimal'
;

// Rule RationalTypeDefinition
ruleRationalTypeDefinition:
	'rational'
;

// Rule ArrayTypeDefinition
ruleArrayTypeDefinition:
	'['
	ruleExpression
	']'
	ruleType
;

// Rule IntegerRangeTypeDefinition
ruleIntegerRangeTypeDefinition:
	'integer'
	'range'
;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition:
	'enum'
	'{'
	ruleEnumerationLiteralDefinition
	(
		','
		ruleEnumerationLiteralDefinition
	)*
	'}'
;

// Rule EnumerationLiteralDefinition
ruleEnumerationLiteralDefinition:
	RULE_ID
;

// Rule RecordTypeDefinition
ruleRecordTypeDefinition:
	'record'
	'{'
	ruleFieldDeclaration
	(
		','
		ruleFieldDeclaration
	)*
	'}'
;

// Rule SubrangeTypeDefinition
ruleSubrangeTypeDefinition:
	'#['
	(
		'-'
		'inf'
		    |
		ruleExpression
	)
	'to'
	(
		'inf'
		    |
		ruleExpression
	)
	']'
;

// Rule FunctionTypeDefinition
ruleFunctionTypeDefinition:
	'function'
	'('
	(
		ruleType
		(
			','
			ruleType
		)*
	)?
	')'
	':'
	ruleType
;

// Rule Expression
ruleExpression:
	(
		ruleIfThenElseExpression
		    |
		ruleElseExpression
	)
;

// Rule ElseExpression
ruleElseExpression:
	'else'
;

// Rule IfThenElseExpression
ruleIfThenElseExpression:
	ruleImplyExpression
	(
		'?'
		ruleExpression
		(
			(':')
		)
		ruleExpression
	)?
;

// Rule ImplyExpression
ruleImplyExpression:
	ruleOrExpression
	(
		'imply'
		ruleImplyExpression
	)?
;

// Rule OrExpression
ruleOrExpression:
	ruleXorExpression
	(
		(
			'or'
			ruleXorExpression
		)+
	)?
;

// Rule XorExpression
ruleXorExpression:
	ruleAndExpression
	(
		(
			'xor'
			ruleAndExpression
		)+
	)?
;

// Rule AndExpression
ruleAndExpression:
	ruleUnaryLogicExpression
	(
		(
			'and'
			ruleUnaryLogicExpression
		)+
	)?
;

// Rule UnaryLogicExpression
ruleUnaryLogicExpression:
	(
		ruleNotExpression
		    |
		ruleForallExpression
		    |
		ruleExistsExpression
		    |
		ruleEquivalenceExpression
	)
;

// Rule NotExpression
ruleNotExpression:
	(
		((
			'not'
			    |
			'!'
		))
	)
	ruleUnaryLogicExpression
;

// Rule ForallExpression
ruleForallExpression:
	(
		('forall')
	)
	'('
	(
		ruleParameterDeclaration
		(
			','
			ruleParameterDeclaration
		)*
	)?
	')'
	':'
	ruleUnaryLogicExpression
;

// Rule ExistsExpression
ruleExistsExpression:
	(
		('exists')
	)
	'('
	(
		ruleParameterDeclaration
		(
			','
			ruleParameterDeclaration
		)*
	)?
	')'
	':'
	ruleUnaryLogicExpression
;

// Rule EquivalenceExpression
ruleEquivalenceExpression:
	ruleComparisionExpression
	(
		(
			'='
			    |
			'=='
		)
		ruleComparisionExpression
		    |
		(
			'/='
			    |
			'!='
		)
		ruleComparisionExpression
	)?
;

// Rule ComparisionExpression
ruleComparisionExpression:
	ruleAdditiveExpression
	(
		(
			'>'
			    |
			'>='
			    |
			'<'
			    |
			'<='
		)
		ruleAdditiveExpression
	)*
;

// Rule AdditiveExpression
ruleAdditiveExpression:
	ruleMultiplicativeExpression
	(
		(
			('+'
			ruleMultiplicativeExpression
			)
		)+
		    |
		'-'
		ruleMultiplicativeExpression
	)*
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression:
	ruleSignumExpression
	(
		(
			('*'
			ruleSignumExpression
			)
		)+
		    |
		(
			'/'
			    |
			'div'
			    |
			'mod'
		)
		ruleSignumExpression
	)*
;

// Rule SignumExpression
ruleSignumExpression:
	(
		(
			('-')
		)
		ruleSignumExpression
		    |
		(
			('+')
		)
		ruleSignumExpression
		    |
		ruleAccessExpression
	)
;

// Rule AccessExpression
ruleAccessExpression:
	rulePrimaryExpression
	(
		'['
		ruleExpression
		']'
		    |
		'('
		(
			ruleExpression
			(
				','
				ruleExpression
			)*
		)?
		')'
		    |
		'.'
		ruleFieldReferenceExpression
		    |
		'->'
		'select'
	)*
;

// Rule FieldReferenceExpression
ruleFieldReferenceExpression:
	RULE_ID
;

// Rule PrimaryExpression
superPrimaryExpression:
	(
		ruleDirectReferenceExpression
		    |
		ruleLiteralExpression
		    |
		'('
		ruleExpression
		')'
	)
;

// Rule DirectReferenceExpression
ruleDirectReferenceExpression:
	RULE_ID
;

// Rule LiteralExpression
ruleLiteralExpression:
	(
		ruleIntegerLiteralExpression
		    |
		ruleDecimalLiteralExpression
		    |
		ruleRationalLiteralExpression
		    |
		ruleBooleanLiteralExpression
		    |
		ruleArrayLiteralExpression
		    |
		ruleRecordLiteralExpression
		    |
		ruleEnumerationLiteralExpression
		    |
		ruleIntegerRangeLiteralExpression
		    |
		ruleOpaqueExpression
		    |
		ruleInfinityExpression
	)
;

// Rule InfinityExpression
ruleInfinityExpression:
	'infinity'
;

// Rule IntegerLiteralExpression
ruleIntegerLiteralExpression:
	RULE_INTEGER
;

// Rule DecimalLiteralExpression
ruleDecimalLiteralExpression:
	RULE_DECIMAL
;

// Rule RationalLiteralExpression
ruleRationalLiteralExpression:
	RULE_INTEGER
	'%'
	RULE_INTEGER
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression:
	(
		ruleTrueExpression
		    |
		ruleFalseExpression
	)
;

// Rule TrueExpression
ruleTrueExpression:
	'true'
;

// Rule FalseExpression
ruleFalseExpression:
	'false'
;

// Rule RecordLiteralExpression
ruleRecordLiteralExpression:
	'#'
	RULE_ID
	'{'
	ruleFieldAssignment
	(
		','
		ruleFieldAssignment
	)*
	'}'
;

// Rule FieldAssignment
ruleFieldAssignment:
	ruleFieldReferenceExpression
	':='
	ruleExpression
;

// Rule EnumerationLiteralExpression
ruleEnumerationLiteralExpression:
	ruleTypeReference
	'::'
	RULE_ID
;

// Rule OpaqueExpression
ruleOpaqueExpression:
	RULE_STRING
;

// Rule ArrayLiteralExpression
ruleArrayLiteralExpression:
	'#['
	ruleExpression
	(
		','
		ruleExpression
	)*
	']'
;

// Rule IntegerRangeLiteralExpression
ruleIntegerRangeLiteralExpression:
	(
		'<+'
		    |
		'<-'
	)
	ruleExpression
	'..'
	ruleExpression
	(
		'+>'
		    |
		'->'
	)
;

// Rule BasicConstraintDefinition
ruleBasicConstraintDefinition:
	'constraint'
	ruleExpression
;

// Rule And
ruleAnd:
	'&&'
;

// Rule Or
ruleOr:
	'||'
;

// Rule Equal
ruleEqual:
	'=='
;

// Rule Xor
ruleXor:
	'^'
;

// Rule Imply
ruleImply:
	'->'
;

// Rule Not
ruleNot:
	'!'
;

// Rule RealizationMode
ruleRealizationMode:
	(
		'provides'
		    |
		'requires'
	)
;

// Rule SchedulingOrder
ruleSchedulingOrder:
	(
		'top-down'
		    |
		'bottom-up'
	)
;

// Rule OrthogonalRegionSchedulingOrder
ruleOrthogonalRegionSchedulingOrder:
	(
		'sequential'
		    |
		'random'
	)
;

// Rule TransitionPriority
ruleTransitionPriority:
	(
		'off'
		    |
		'order-based'
		    |
		'value-based'
	)
;

// Rule GuardEvaluation
ruleGuardEvaluation:
	(
		'on-the-fly'
		    |
		'beginning-of-step'
	)
;

// Rule SpecialStateKind
ruleSpecialStateKind:
	'accepting'
;

// Rule NotDefinedEventMode
ruleNotDefinedEventMode:
	(
		'permissive'
		    |
		'strict'
	)
;

// Rule LinkType
ruleLinkType:
	(
		'self'
		    |
		'component'
	)
;

// Rule History
ruleHistory:
	(
		'no-history'
		    |
		'shallow'
		    |
		'deep'
	)
;

// Rule TimeUnit
ruleTimeUnit:
	(
		'ms'
		    |
		's'
	)
;

// Rule ControlFunction
ruleControlFunction:
	(
		'run'
		    |
		'full step'
		    |
		'reset'
	)
;

// Rule DiscardStrategy
ruleDiscardStrategy:
	(
		'incoming'
		    |
		'oldest'
	)
;

// Rule EventDirection
ruleEventDirection:
	(
		'in'
		    |
		'out'
		    |
		'inout'
		    |
		'internal'
	)
;

// Rule Persistency
rulePersistency:
	(
		'persistent'
		    |
		'transient'
	)
;

RULE_INT : 'INT has been deactivated';

RULE_INTEGER : '-'? ('0'..'9')+;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~('\\'|'"'))* '"'|'\'' ('\\' .|~('\\'|'\''))* '\'');

RULE_ML_COMMENT : '/*' .*? '*/' ->skip;

RULE_SL_COMMENT : '//' ~('\n'|'\r')* ('\r'? '\n')? ->skip;

RULE_WS : (' '|'\t'|'\r'|'\n')+ ->skip;

RULE_ANY_OTHER : .;
